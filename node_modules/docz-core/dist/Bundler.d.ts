import { Config as Args, Env } from './commands/args';
import { BabelRC } from './utils/babel-config';
export interface Server {
    app: any;
    on: (event: string, cb: (server: any) => void) => void;
    close: () => void;
}
export interface ServerHooks {
    onCreateApp<A>(app: A): void;
    OnServerListening<S>(server: S): void;
}
export interface BundlerServer {
    start(): Promise<Server>;
}
export declare type ConfigFn<C> = (babelrc: BabelRC) => Promise<C>;
export declare type BuildFn<C> = (config: C, dist: string) => void;
export declare type ServerFnReturn = BundlerServer | Promise<BundlerServer>;
export declare type ServerFn<C> = (config: C, hooks: ServerHooks) => ServerFnReturn;
export interface BundlerConstructor<Config> {
    args: Args;
    config: ConfigFn<Config>;
    server: ServerFn<Config>;
    build: BuildFn<Config>;
}
export interface ConfigObj {
    [key: string]: any;
}
export declare class Bundler<C = ConfigObj> {
    private readonly args;
    private config;
    private server;
    private builder;
    constructor(params: BundlerConstructor<C>);
    getConfig(env: Env): Promise<C>;
    createServer(config: C): Promise<BundlerServer>;
    build(config: C): Promise<void>;
    private mountConfig;
    private isProd;
}
