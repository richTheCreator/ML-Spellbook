export declare type Send = (type: string, payload: any) => void;
export declare type On = (type: string) => Promise<any>;
export interface Action {
    type: string;
    payload: any;
}
export interface Params {
    state: Record<string, any>;
    setState: (key: string, val: any) => void;
}
export interface State {
    init: (params: Params) => Promise<any>;
    update: (params: Params) => any;
}
export declare class DataServer {
    private server?;
    private states;
    private state;
    constructor(server?: any, port?: number, host?: string);
    register(states: State[]): DataServer;
    init(): Promise<void>;
    listen(): Promise<void>;
    private handleConnection;
    private setState;
}
