import * as React from 'react';
import { ComponentType } from 'react';
export interface EnumValue {
    value: string;
    computed: boolean;
}
export interface FlowTypeElement {
    name: string;
    value: string;
}
export interface FlowTypeArgs {
    name: string;
    type: {
        name: string;
    };
}
export interface PropType {
    name: string;
    value?: any;
    raw?: any;
    computed?: boolean;
}
export interface FlowType extends PropType {
    elements: FlowTypeElement[];
    name: string;
    raw: string;
    type?: string;
    computed?: boolean;
    signature?: {
        arguments: FlowTypeArgs[];
        return: {
            name: string;
        };
    };
}
export interface Prop {
    required: boolean;
    description?: string;
    type: PropType;
    defaultValue?: {
        value: string;
        computed: boolean;
    };
    flowType?: FlowType;
}
export declare type ComponentWithDocGenInfo = ComponentType & {
    __docgenInfo: {
        description?: string;
        props?: Record<string, Prop>;
    };
};
export interface PropsTable {
    of: ComponentWithDocGenInfo;
    components: {
        [key: string]: ComponentType<any>;
    };
}
export declare type TooltipComponent = React.ComponentType<{
    text: React.ReactNode;
    children: React.ReactNode;
}>;
export declare const PropsTable: any;
