"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCopyOnWriteState;

var _react = _interopRequireWildcard(require("react"));

var _immer = _interopRequireDefault(require("immer"));

var _invariant = _interopRequireDefault(require("invariant"));

var _shallowEqual = _interopRequireDefault(require("fbjs/lib/shallowEqual"));

var _createReactContext = _interopRequireDefault(require("create-react-context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

// The default selector is the identity function
function identityFn(n) {
  return n;
}

function createCopyOnWriteState(baseState) {
  var updateState = null;
  var State = (0, _createReactContext.default)(baseState); // Wraps immer's produce. Only notifies the Provider
  // if the returned draft has been changed.

  function mutate(fn) {
    (0, _invariant.default)(updateState !== null, "mutate(...): you cannot call mutate when no CopyOnWriteStoreProvider " + "instance is mounted. Make sure to wrap your consumer components with " + "the returned Provider, and/or delay your mutate calls until the component " + "tree is mounted.");
    updateState(fn);
  }
  /**
   * Currently createSelector is just the identity function. The long-term
   * goal is for it to be a way to create optimizable selectors using React's
   * unstable_observedBits Context API. The implementation of that
   * optimization strategy is currently still in development, but I want people
   * to start using createSelector now. Then, when it *does* get optimized, there
   * will be changes required from users.
   */


  function createSelector(fn) {
    return fn;
  }

  var CopyOnWriteStoreProvider =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(CopyOnWriteStoreProvider, _React$Component);

    function CopyOnWriteStoreProvider() {
      var _ref;

      var _temp, _this;

      _classCallCheck(this, CopyOnWriteStoreProvider);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = CopyOnWriteStoreProvider.__proto__ || Object.getPrototypeOf(CopyOnWriteStoreProvider)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), "state", {
        configurable: true,
        enumerable: true,
        writable: true,
        value: _this.props.initialState || baseState
      }), Object.defineProperty(_assertThisInitialized(_this), "updateState", {
        configurable: true,
        enumerable: true,
        writable: true,
        value: function value(fn) {
          _this.setState(function (state) {
            var nextState = (0, _immer.default)(state, function (draft) {
              return fn(draft, state);
            });

            if (nextState === state) {
              return null;
            }

            return nextState;
          });
        }
      }), _temp));
    }

    _createClass(CopyOnWriteStoreProvider, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        (0, _invariant.default)(updateState === null, "CopyOnWriteStoreProvider(...): There can only be a single " + "instance of a provider rendered at any given time.");
        updateState = this.updateState;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        updateState = null;
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(State.Provider, {
          value: this.state
        }, this.props.children);
      }
    }]);

    return CopyOnWriteStoreProvider;
  }(_react.default.Component);

  var ConsumerMemoization =
  /*#__PURE__*/
  function (_React$Component2) {
    _inherits(ConsumerMemoization, _React$Component2);

    function ConsumerMemoization() {
      _classCallCheck(this, ConsumerMemoization);

      return _possibleConstructorReturn(this, (ConsumerMemoization.__proto__ || Object.getPrototypeOf(ConsumerMemoization)).apply(this, arguments));
    }

    _createClass(ConsumerMemoization, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(_ref2) {
        var state = _ref2.state,
            consume = _ref2.consume,
            version = _ref2.version;
        var currentState = this.props.state;
        return version !== this.props.version || state.some(function (observedState, i) {
          return !(0, _shallowEqual.default)(observedState, currentState[i]);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            state = _props.state;
        return children.apply(null, state);
      }
    }]);

    return ConsumerMemoization;
  }(_react.default.Component);

  var CopyOnWriteConsumer =
  /*#__PURE__*/
  function (_React$Component3) {
    _inherits(CopyOnWriteConsumer, _React$Component3);

    function CopyOnWriteConsumer() {
      var _ref3;

      var _temp2, _this2;

      _classCallCheck(this, CopyOnWriteConsumer);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _possibleConstructorReturn(_this2, (_temp2 = _this2 = _possibleConstructorReturn(this, (_ref3 = CopyOnWriteConsumer.__proto__ || Object.getPrototypeOf(CopyOnWriteConsumer)).call.apply(_ref3, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this2), "state", {
        configurable: true,
        enumerable: true,
        writable: true,
        value: {
          version: 0
        }
      }), Object.defineProperty(_assertThisInitialized(_this2), "consumer", {
        configurable: true,
        enumerable: true,
        writable: true,
        value: function value(state) {
          var version = _this2.state.version;
          var _this2$props = _this2.props,
              children = _this2$props.children,
              select = _this2$props.select,
              render = _this2$props.render;
          var observedState = select.map(function (fn) {
            return fn(state);
          });
          return _react.default.createElement(ConsumerMemoization, {
            version: version,
            state: observedState
          }, typeof render === "function" ? render : children);
        }
      }), _temp2));
    }

    _createClass(CopyOnWriteConsumer, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(State.Consumer, null, this.consumer);
      }
    }], [{
      key: "getDerivedStateFromProps",

      /**
       * Consumers need to differentiate between updates coming
       * through Context, and updates triggered by a parent re-rendering.
       *
       * In the case of a Context update, we want to avoid re-rendering the Consumer
       * unless state has changed.
       *
       * In the case of a parent re-rendering, we want to ere on the side of caution
       * and render the Consumer again, just in case it's also using values from props.
       *
       * In order to accomplish this we use gDSFP to track an integer which represents the
       * "version" of the Consumer. gDSFP won't be called for a Context update, so if
       * the version changes we know that the parent has re-rendered.
       */
      value: function getDerivedStateFromProps(props, state) {
        return {
          version: state.version + 1
        };
      }
    }]);

    return CopyOnWriteConsumer;
  }(_react.default.Component);

  Object.defineProperty(CopyOnWriteConsumer, "defaultProps", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: {
      select: [identityFn],
      consume: null
    }
  });
  return {
    Provider: CopyOnWriteStoreProvider,
    Consumer: CopyOnWriteConsumer,
    mutate: mutate,
    createSelector: createSelector
  };
}